# prefix
unbind C-b          # default is Ctrl+b
set -g prefix C-a   # remapped to Ctrl+a

# color settings
set -g default-terminal "screen-256color"
set -g status-bg colour68
set -g status-fg white

# selected pane
set -g pane-border-style fg=white
set -g pane-active-border-style "bg=default fg=colour68"

# status bar
set -wg mode-style bg=colour68,fg=white

# activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# pane switching using mouse
set-option -g mouse on

# reload configuration
bind r source-file ~/.tmux.conf \; display-message "tmux.conf reloaded !"

# split pane configuration
bind | split-window -h
bind - split-window -v

# git status
bind g split-window -h -c "/home/flo/tmux/bin" "./tmux-git-status.sh changes && clear && ./tmux-git-status.sh commits"

# clipboard
#bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
#set -g @plugin 'tmux-plugins/tmux-yank'

# kill current session
bind X confirm-before kill-session

# kafka related stuff
#bind K source-file ~/.tmux/kafka
bind K source-file ~/.tmux/kafka-cluster

###############################################################################
# old terminalizer scenarios

#------------------------------------------------------------------------------
# gateways with virtualfridges for organization
bind 1 send-keys '#' enter '# GET http://appliance-service:8080/appliance/organizations/{ORGANIZATION_ID}/mappedgateways' enter '#' enter '# scenario:' enter '# ---------' enter '# 1. query database for all gateways together with virtual fridges for an organization' enter '# 2. execute REST call to fetch data' enter '#' enter '# used ORGANIZATION_ID: 1ca0178e-c9d8-4a53-bde8-7401ebc3f2d0' enter '#' enter enter
bind 2 send-keys "docker exec -it -u postgres appliance-db psql -c \"select g.gateway_id, g.organization_id, m.virtual_fridge_id from gateway as g inner join adapter as a on g.gateway_id = a.gateway_id left join modbus_fridge as m on a.adapter_id = m.adapter_id where organization_id = '1ca0178e-c9d8-4a53-bde8-7401ebc3f2d0' order by g.gateway_id;\"";
bind 3 send-keys 'curl -X GET "http://localhost:8080/appliance/organizations/1ca0178e-c9d8-4a53-bde8-7401ebc3f2d0/mappedgateways" -H "accept: application/json"'

#------------------------------------------------------------------------------
# reset organization
#bind 1 send-keys '#' enter '# POST http://appliance-service:8080/appliance/gateways/{GATEWAY_ID}/resetOrganization' enter '# Header: UserContext' enter '#' enter '# scenario:' enter '# ---------' enter '# 1. verify in database that gateway has organization mapping' enter '# 2. trigger endpoint to reset organization mapping' enter '# 3. verify in database that reset of organization mapping was successful' enter '#' enter '# used GATEWAY_ID: 523abd08-5dca-4dcf-9d8f-6ef535fd0cf6' enter '#' enter enter
#bind 2 send-keys "docker exec -it -u postgres appliance-db psql -c \"select gateway_id, coalesce(organization_id, '<NULL>') as mapped_organization from gateway where gateway_id = '523abd08-5dca-4dcf-9d8f-6ef535fd0cf6';\""
#bind 3 send-keys 'curl -i -s -X POST "http://localhost:8080/appliance/gateways/523abd08-5dca-4dcf-9d8f-6ef535fd0cf6/resetOrganization" -H "accept: */*" -H "UserContext: eyJ1cG4iOiJ0c3B1c2QwQGxpZWJoZXJyLmV4dHJhbmV0IiwiZXh0ZXJuYWxPcmdhbml6YXRpb25JZCI6IjYwM2FlZWRiODRmNTQ0MDM4ZDA5YWUzYjA0ODEwN2RlIiwiaW50ZXJuYWxVc2VySWQiOiJhM2Y0ZjhkNC1hMjNmLTQzZjItYjM5NC1jMjFkMGViNDI4OTkiLCJpbnRlcm5hbE9yZ2FuaXphdGlvbklkIjoiMGZjOTZmMTYtNWQwOC00ZTUyLWIzMDQtNTQ4MjBiZWMyMTU2IiwiYmVhcmVyVG9rZW4iOiJCZWFyZXIgZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrTXlRMEkyTURZd01qaEZRa1E1UTBVNE1qazNORE5GUkRFNE1rTTJOa0UzTVRreU9ESTBNellpTENKMGVYQWlPaUpLVjFRaUxDSjROWFFpT2lKM2MzUm5XVU5xY2pKak5rTnNNRkIwUjBONGJYQjRhMjlLUkZraWZRLmV5SnVZbVlpT2pFMU5UQXlNamM0TkRRc0ltVjRjQ0k2TVRVMU1ESXpNVFEwTkN3aWFYTnpJam9pYUhSMGNITTZMeTlzYjJkcGJuUnpkQzVzYVdWaWFHVnljaTVqYjIwaUxDSmhkV1FpT2xzaWFIUjBjSE02THk5c2IyZHBiblJ6ZEM1c2FXVmlhR1Z5Y2k1amIyMHZjbVZ6YjNWeVkyVnpJaXdpYkdsamJtRndhU0lzSW1oaGRXMTViR2xsWW1obGNuSWlYU3dpWTJ4cFpXNTBYMmxrSWpvaVl6UTRPR001TURRdFlURm1OQzAwTWpjekxXSmhPVFF0TVdRM09XRTJaV1l3T0RGa0lpd2ljM1ZpSWpvaWRITndkWE5rTUVCc2FXVmlhR1Z5Y2k1bGVIUnlZVzVsZENJc0ltRjFkR2hmZEdsdFpTSTZNVFUxTURJeU16SXdOeXdpYVdSd0lqb2liRzlqWVd3aUxDSnVZVzFsSWpvaVZYTmxjaUJFWlcxdklDaElRVlVnUkdsbmFYUmhiR2x6YVdWeWRXNW5JRUoxYzJsdVpYTnpLU0lzSW1OdmJYQmhibmxmYVdRaU9pSTJNRE5oWldWa1lqZzBaalUwTkRBek9HUXdPV0ZsTTJJd05EZ3hNRGRrWlNJc0ltVnRZV2xzSWpvaWFHRjFZblZ6YVc1bGMzTkFaR1Z0YjIxaGFXd3ViWGxzYVdWaWFHVnljaTVqYjIwaUxDSnpZMjl3WlNJNld5SnZjR1Z1YVdRaUxDSnliMnhsSWl3aWNISnZabWxzWlNJc0ltVnRZV2xzSWl3aVkyOXNiR1ZoWjNWbGN5SXNJbXhwWTI1aGNHa2lMQ0pvWVhWdGVXeHBaV0pvWlhKeUlsMHNJbUZ0Y2lJNld5SndkMlFpWFgwLkR1TmNxelFqblpIT29xY3JpOEZTZ0ttRmt5dGphZVN5X1dORVA0LWF0VmVsU2dBN0tkbzB2NWJQbXpISzhROW9nbm1LTW9rTXhKWDdyVjhIekZVYlgwNjBXN2ZIN1FGMjNZVFRWWk81NEh4YVRsc1BqU1NDQnV2b1ZRbENUMnRGdFBacDUzOEZWVlJSeUI3bS1wcWxqcWNvWUdxVUExOC1zZ3NsX2VxdWV3MWZSc2h0RkZRamlZQmQtbDZWLWxBbmJqOFVVUE9HT3B0WlUwT3VDMGpZZVpfSU9MVXQ1SDRUQ0xFM0c2R0JnUmdiZ3BVTDNhWnRUOXJXMC1TcDBXWWdPdngxTURtSFZyRm1pN29EOER0T2lNMjRVZnJmZkRfdEZCY2lpbDYwSk9PT0R5MERuR3lsSmZSeVFCY1lSS0ZXck9DQmwweWh1dEgyOFcyVE11RkthQSJ9" -H "Content-Type: application/json" -d "{ \"organizationId\": \"liebherr eDev\"}" | grep "HTTP/1.1 204"'
#bind 4 send-keys "docker exec -it -u postgres appliance-db psql -c \"select gateway_id, coalesce(organization_id, '<NULL>') as mapped_organization from gateway where gateway_id = '523abd08-5dca-4dcf-9d8f-6ef535fd0cf6';\""

################################################################################

# stuff
# https://github.com/rothgar/awesome-tmux

################################################################################

# tmux plugin manager

# List of plugins
# https://github.com/tmux-plugins/tpm
set -g @plugin 'tmux-plugins/tpm'

# https://github.com/tmux-plugins/tmux-yank https://github.com/tmux-plugins/tpm
set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

